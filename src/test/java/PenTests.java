import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTests {

    private final ByteArrayOutputStream outContent = new ByteArrayOutputStream();
    private final PrintStream originalOut = System.out;

    @BeforeClass
    public void setUpStreams() {
        System.setOut(new PrintStream(outContent));
    }

    @AfterClass
    public void restoreStreams() {
        System.setOut(originalOut);
    }

    @DataProvider
    public Object[][] getPenColours() {
        return new Object[][]{
                {"BLUE","BLUE"},
                {"RED","RED"},
                {"GREEN","GREEN"},
        };
    }

    @DataProvider
    public Object[][] getPenStatus() {
        return new Object[][]{
                {1,true},
                {0,false},
                {-1,false},
        };
    }

    @DataProvider
    public Object[][] getPenData() {
        return new Object[][]{
                {"Hello World",20,1.0,"Hello World"},
                {"Hello World",5,1.0,"Hello"},
                {"Hello World",20,2.0,"Hello World"},
                {" 1 ",1,1.0," 1 "},
                {"  ",1,1.0,"  "},
                {null,1,1.0,null},
        };
    }

    @Test
    public void FirstConstructorTest ()
    {
        Pen pen = new Pen(1);
        Assert.assertNotNull(pen);
    }

    @Test
    public void SecondConstructorTest ()
    {
        Pen pen = new Pen(1,1);
        Assert.assertNotNull(pen);
    }

    @Test
    public void ThirdConstructorTest ()
    {
        Pen pen = new Pen(1,1,"red");
        Assert.assertNotNull(pen);
    }

    @Test (dataProvider = "getPenColours")
    public void GetColourReturnsCorrectColour (String colour, String expectedColour)
    {
        Pen pen = new Pen(1,1,colour);
        String result = pen.getColor();
        Assert.assertEquals(result,expectedColour);
    }

    @Test (dataProvider = "getPenStatus")
    public void IsWorkReturnsCorrectStatus (int containerValue,Boolean penStatus)
    {
        Pen pen = new Pen(containerValue);
        Boolean result = pen.isWork();
        Assert.assertEquals(result,penStatus);
    }

    @Test
    public void writeReturnEmptyStringForEmptyPen ()
    {
        Pen pen = new Pen(0);
        String result = pen.write("test");
        Assert.assertEquals(result,"");
    }

    @Test (dataProvider = "getPenData")
    public void writeReturnCorrectStringForNotEmptyPen (String value, int containerValue, double sizeLetter, String expectedValue)
    {
        Pen pen = new Pen(containerValue,sizeLetter);
        String result = pen.write(value);
        Assert.assertEquals(result,expectedValue);
    }

    @Test
    public void writeReturnCorrectStringForNotEmptyPen ()
    {
        Pen pen = new Pen(10);
        pen.write("value");
        String result = pen.write("value1");
        Assert.assertEquals(result,"value");
    }

    @Test
    public void doSomethingElseWritesCorrectColour() {
        Pen pen = new Pen(1,1.0,"red");
        pen.doSomethingElse();
        String consoleValue = outContent.toString().replaceAll("[^a-zA-Z0-9]", "");
        Assert.assertEquals(consoleValue,"red");
    }

}